import components.map.Map;
import components.map.Map1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * @author Rohan Patel
 */
public final class WordCounter {

    /**
     * Default constructor--private to prevent instantiation.
     */
    private WordCounter() {
    }

    /**
     * Returns a string with from an input with no punctuation.
     *
     * @param input
     *            source of string
     * @return string from {@code input}
     * @requires input.is_open
     * @ensures readFile = [the string from input with no punctuation]
     */
    public static String readFile(SimpleReader input) {
        assert input != null : "Violation of: input is not null";
        assert input.isOpen() : "Violation of: input.is_open";
        String txt = input.nextLine();
        txt = removeFirstSpaces(txt);
        while (!(input.atEOS())) {
            txt += " " + input.nextLine();
        }
        txt = txt.replaceAll("[^a-zA-Z'\\s]", " ");
        txt += " ";
        return txt;
    }

    /**
     * Removes spaces in the beginning of the string(if any).
     *
     * @param str
     *            string where first spaces are removed
     * @return string with no beginning spaces
     * @ensures removeFirstSpaces = [string with no spaces in beginning]
     */
    private static String removeFirstSpaces(String str) {
        String noSpaces = str;
        if (!noSpaces.equals("")) {
            while (noSpaces.charAt(0) == ' ') {
                noSpaces = noSpaces.substring(1);
            }
        }
        return noSpaces;
    }

    /**
     * Converts a string into a map. Each word is paired with the number of
     * occurrences in the string.(Method is case-sensitive)
     *
     * @param str
     *            string that is put into a map
     * @return map<String, Integer> where the String is a word and the Integer
     *         the number of occurrences
     * @requires str has no spaces in the beginning
     * @ensures convertToMap = [map contains all words in str with the number of
     *          times they are in str] and there are no repeated words in the
     *          returned map
     */
    public static Map<String, Integer> convertToMap(String str) {
        Map<String, Integer> counter = new Map1L<String, Integer>();
        int i = 0;
        int end = 0;
        int length = str.length();
        String word = "";
        while (i < length) {
            while (str.charAt(end) != ' ') {
                end++;
            }
            word = str.substring(i, end);

            while (end != str.length()
                    && !(Character.isLetter(str.charAt(end)))) {
                end++;
            }
            if (counter.hasKey(word)) {
                Integer val = counter.value(word);
                val++;
                counter.replaceValue(word, val);
            } else {
                counter.add(word, 1);
            }
            i = end;
        }
        return counter;
    }

    /**
     * Takes the keys of a map and return an array containing those keys.
     *
     * @param map
     *            map where keys are obtained
     * @return String[] with all keys in map
     * @ensures convertToArr = [String[] with all keys in map]
     */
    public static String[] convertToArr(Map<String, Integer> map) {
        String[] words = new String[map.size()];
        int j = 0;
        for (Map.Pair<String, Integer> i : map) {
            words[j] = i.key();
            j++;
        }
        return words;
    }

    /**
     * Sorts an array in alphabetical order using insertion sort algorithm.
     *
     * @param words
     *            array that needs to be sorted
     * @return the sorted array
     * @ensures sort = [a sorted array of words in alphabetical order]
     */
    public static String[] sort(String[] words) {
        for (int i = 1; i < words.length; i++) {
            String str = words[i];
            int j = i - 1;
            while (j >= 0 && words[j].toLowerCase()
                    .compareTo(str.toLowerCase()) > 0) {
                words[j + 1] = words[j];
                j -= 1;
            }
            words[j + 1] = str;
        }
        return words;
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the name of the file as the title</title> </head>
     * <body>
     * <h2>the name of the file</h2>
     * <hr>
     * <table border="1">
     * <tbody>
     * <tr>
     * <th>Words</th>
     * <th>Counts</th>
     * </tr>
     *
     * @param str
     *            Information for title and h2
     * @param out
     *            the output stream
     * @updates out.content
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    public static void outputHeader(String str, SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + "Words Counted in " + str + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h2>" + "Words Counted in " + str + "</h2>");
        out.println("<hr>");
        out.println("<table border = 1>");
        out.println("<tbody>");
        out.println("<tr>");
        out.println("<th>" + "Words" + "</th>");
        out.println("<th>" + "Counts" + "</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </tbody>
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    public static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</tbody>");
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Processes outputs for all table rows. Each row contains 2 elements: the
     * Word and the Count of the item.
     *
     * @param out
     *            the output stream
     * @param map
     *            information for count for a specific word
     * @param arr
     *            array for the order of words
     * @updates out.content
     * @requires out.is_open, arr sorted in alphabetical order, arr and map are
     *           same size, map has a key that corresponds to every value in arr
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with Word and Count]
     * </pre>
     */
    public static void processCell(SimpleWriter out, Map<String, Integer> map,
            String[] arr) {
        for (int i = 0; i < arr.length; i++) {
            out.println("<tr>");
            out.println("<td>" + arr[i] + "</td>");
            out.println("<td>" + map.value(arr[i]) + "</td>");
            out.println("</tr>");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        Map<String, Integer> counter = new Map1L<String, Integer>();

        out.print("Input file: ");
        String inputFileName = in.nextLine();
        SimpleReader inFile = new SimpleReader1L(inputFileName);

        out.print("Enter a name for the ouput file: ");
        String outputFileName = in.nextLine();
        SimpleWriter outFile = new SimpleWriter1L(outputFileName);

        String str = readFile(inFile);
        counter = convertToMap(str);

        String[] words = new String[counter.size()];
        words = convertToArr(counter);
        words = sort(words);

        outputHeader(inputFileName, outFile);
        processCell(outFile, counter, words);
        outputFooter(outFile);

        in.close();
        out.close();
        outFile.close();
        inFile.close();
    }

}
